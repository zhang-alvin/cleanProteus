# A type of -*- python -*- file
import numpy
cimport numpy

cdef extern from "yy/My_projection.h" namespace "proteus":
    cdef cppclass cppMy_projection_base:
        void calculateResidual(double * mesh_trial_ref,
                               double * mesh_grad_trial_ref,
                               double * mesh_dof,
                               int * mesh_l2g,
                               double * dV_ref,
                               double * u_trial_ref,
                               double * u_grad_trial_ref,
                               double * u_test_ref,
                               double * u_grad_test_ref,
                               double * momentum_trial_ref,
                               double * momentum_grad_trial_ref,
                               double * mesh_trial_trace_ref,
                               double * mesh_grad_trial_trace_ref,
                               double * dS_ref,
                               double * u_trial_trace_ref,
                               double * u_grad_trial_trace_ref,
                               double * u_test_trace_ref,
                               double * u_grad_test_trace_ref,
                               double * normal_ref,
                               double * boundaryJac_ref,
                               int nElements_global,
                               int * isDOFBoundary,
                               int * isFluxBoundary,
                               int * u_l2g,
                               double * u_dof,
                               int * velocity_l2g,
                               int nDofs_velocity_per_ele,
                               double * velocity_x_dof,
                               double * velocity_y_dof,
                               double * q_p,#self.q[('u', 0)]
                               double * q_grad_p,#self.q[('grad(u)', 0)],
                               double * ebqe_p,
                               double * ebqe_grad_p,
                               double * ebqe_bc_u_ext,
                               double * ebqe_adv_flux,
                               double * ebqe_diff_flux,
                               double * bc_adv_flux,
                               double * bc_diff_flux,
                               int offset_u,
                               int stride_u,
                               double * globalResidual,
                               int nExteriorElementBoundaries_global,
                               int * exteriorElementBoundariesArray,
                               int * elementBoundaryElementsArray,
                               int * elementBoundaryLocalElementBoundariesArray)
        void calculateJacobian(double * mesh_trial_ref,
                               double * mesh_grad_trial_ref,
                               double * mesh_dof,
                               int * mesh_l2g,
                               double * dV_ref,
                               double * u_trial_ref,
                               double * u_grad_trial_ref,
                               double * u_test_ref,
                               double * u_grad_test_ref,
                               double * momentum_trial_ref,
                               double * momentum_grad_trial_ref,
                               double * mesh_trial_trace_ref,
                               double * mesh_grad_trial_trace_ref,
                               double * dS_ref,
                               double * u_trial_trace_ref,
                               double * u_grad_trial_trace_ref,
                               double * u_test_trace_ref,
                               double * u_grad_test_trace_ref,
                               double * normal_ref,
                               double * boundaryJac_ref,
                               int nElements_global,
                               int * isDOFBoundary,
                               int * isFluxBoundary,
                               int * u_l2g,
                               double * u_dof,
                               int * velocity_l2g,
                               int nDofs_velocity_per_ele,
                               double* velocity_x_dof,
                               double* velocity_y_dof,
                               int * csrRowIndeces_u_u,
                               int * csrColumnOffsets_u_u,
                               double * globalJacobian,
                               int nExteriorElementBoundaries_global,
                               int * exteriorElementBoundariesArray,
                               int * elementBoundaryElementsArray,
                               int * elementBoundaryLocalElementBoundariesArray,
                               int * csrColumnOffsets_eb_u_u)
    cppMy_projection_base * newMy_projection(int nSpaceIn,
                                 int nQuadraturePoints_elementIn,
                                 int nDOF_mesh_trial_elementIn,
                                 int nDOF_trial_elementIn,
                                 int nDOF_test_elementIn,
                                 int nQuadraturePoints_elementBoundaryIn,
                                 int CompKernelFlag)

cdef class My_projection:
    cdef cppMy_projection_base * thisptr

    def __cinit__(self,
                  int nSpaceIn,
                  int nQuadraturePoints_elementIn,
                  int nDOF_mesh_trial_elementIn,
                  int nDOF_trial_elementIn,
                  int nDOF_test_elementIn,
                  int nQuadraturePoints_elementBoundaryIn,
                  int CompKernelFlag):
        self.thisptr = newMy_projection(nSpaceIn,
                                  nQuadraturePoints_elementIn,
                                  nDOF_mesh_trial_elementIn,
                                  nDOF_trial_elementIn,
                                  nDOF_test_elementIn,
                                  nQuadraturePoints_elementBoundaryIn,
                                  CompKernelFlag)

    def __dealloc__(self):
        del self.thisptr

    def calculateResidual(self,
                          numpy.ndarray mesh_trial_ref,
                          numpy.ndarray mesh_grad_trial_ref,
                          numpy.ndarray mesh_dof,
                          numpy.ndarray mesh_l2g,
                          numpy.ndarray dV_ref,
                          numpy.ndarray u_trial_ref,
                          numpy.ndarray u_grad_trial_ref,
                          numpy.ndarray u_test_ref,
                          numpy.ndarray u_grad_test_ref,
                          numpy.ndarray momentum_trial_ref,
                          numpy.ndarray momentum_grad_trial_ref,
                          numpy.ndarray mesh_trial_trace_ref,
                          numpy.ndarray mesh_grad_trial_trace_ref,
                          numpy.ndarray dS_ref,
                          numpy.ndarray u_trial_trace_ref,
                          numpy.ndarray u_grad_trial_trace_ref,
                          numpy.ndarray u_test_trace_ref,
                          numpy.ndarray u_grad_test_trace_ref,
                          numpy.ndarray normal_ref,
                          numpy.ndarray boundaryJac_ref,
                          int nElements_global,
                          numpy.ndarray isDOFBoundary,
                          numpy.ndarray isFluxBoundary,
                          numpy.ndarray u_l2g,
                          numpy.ndarray u_dof,
                          numpy.ndarray velocity_l2g,
                          int nDofs_velocity_per_ele,
                          numpy.ndarray velocity_x_dof,
                          numpy.ndarray velocity_y_dof,
                          numpy.ndarray q_p,
                          numpy.ndarray q_grad_p,
                          numpy.ndarray ebqe_p,
                          numpy.ndarray ebqe_grad_p,
                          numpy.ndarray ebqe_bc_u_ext,
                          numpy.ndarray ebqe_adv_flux,
                          numpy.ndarray ebqe_diff_flux,
                          numpy.ndarray bc_adv_flux,
                          numpy.ndarray bc_diff_flux,
                          int offset_u,
                          int stride_u,
                          numpy.ndarray globalResidual,
                          int nExteriorElementBoundaries_global,
                          numpy.ndarray exteriorElementBoundariesArray,
                          numpy.ndarray elementBoundaryElementsArray,
                          numpy.ndarray elementBoundaryLocalElementBoundariesArray):
        self.thisptr.calculateResidual(< double*> mesh_trial_ref.data,
                                        < double * > mesh_grad_trial_ref.data,
                                        < double * > mesh_dof.data,
                                        < int * > mesh_l2g.data,
                                        < double * > dV_ref.data,
                                        < double * > u_trial_ref.data,
                                        < double * > u_grad_trial_ref.data,
                                        < double * > u_test_ref.data,
                                        < double * > u_grad_test_ref.data,
                                        < double * > momentum_trial_ref.data,
                                        < double * > momentum_grad_trial_ref.data,
                                        < double * > mesh_trial_trace_ref.data,
                                        < double * > mesh_grad_trial_trace_ref.data,
                                        < double * > dS_ref.data,
                                        < double * > u_trial_trace_ref.data,
                                        < double * > u_grad_trial_trace_ref.data,
                                        < double * > u_test_trace_ref.data,
                                        < double * > u_grad_test_trace_ref.data,
                                        < double * > normal_ref.data,
                                        < double * > boundaryJac_ref.data,
                                        nElements_global,
                                        < int*> isDOFBoundary.data,
                                        < int*> isFluxBoundary.data,
                                        < int * > u_l2g.data,
                                        < double * > u_dof.data,
                                        < int * > velocity_l2g.data,
                                        nDofs_velocity_per_ele,
                                        < double * > velocity_x_dof.data,
                                        < double * > velocity_y_dof.data,
                                        < double * > q_p.data,
                                        < double * > q_grad_p.data,
                                        < double * > ebqe_p.data,
                                        < double * > ebqe_grad_p.data,
                                        < double * > ebqe_bc_u_ext.data,
                                        < double * > ebqe_adv_flux.data,
                                        < double * > ebqe_diff_flux.data,
                                        < double * > bc_adv_flux.data,
                                        < double * > bc_diff_flux.data,
                                        offset_u,
                                        stride_u,
                                        < double * > globalResidual.data,
                                        nExteriorElementBoundaries_global,
                                        < int * > exteriorElementBoundariesArray.data,
                                        < int * > elementBoundaryElementsArray.data,
                                        < int * > elementBoundaryLocalElementBoundariesArray.data)

    def calculateJacobian(self,
                          numpy.ndarray mesh_trial_ref,
                          numpy.ndarray mesh_grad_trial_ref,
                          numpy.ndarray mesh_dof,
                          numpy.ndarray mesh_l2g,
                          numpy.ndarray dV_ref,
                          numpy.ndarray u_trial_ref,
                          numpy.ndarray u_grad_trial_ref,
                          numpy.ndarray u_test_ref,
                          numpy.ndarray u_grad_test_ref,
                          numpy.ndarray momentum_trial_ref,
                          numpy.ndarray momentum_grad_trial_ref,
                          numpy.ndarray mesh_trial_trace_ref,
                          numpy.ndarray mesh_grad_trial_trace_ref,
                          numpy.ndarray dS_ref,
                          numpy.ndarray u_trial_trace_ref,
                          numpy.ndarray u_grad_trial_trace_ref,
                          numpy.ndarray u_test_trace_ref,
                          numpy.ndarray u_grad_test_trace_ref,
                          numpy.ndarray normal_ref,
                          numpy.ndarray boundaryJac_ref,
                          int nElements_global,
                          numpy.ndarray isDOFBoundary,
                          numpy.ndarray isFluxBoundary,
                          numpy.ndarray u_l2g,
                          numpy.ndarray u_dof,
                          numpy.ndarray velocity_l2g,
                          int nDofs_velocity_per_ele,
                          numpy.ndarray velocity_x_dof,
                          numpy.ndarray velocity_y_dof,
                          numpy.ndarray csrRowIndeces_u_u,
                          numpy.ndarray csrColumnOffsets_u_u,
                          globalJacobian,
                          int nExteriorElementBoundaries_global,
                          numpy.ndarray exteriorElementBoundariesArray,
                          numpy.ndarray elementBoundaryElementsArray,
                          numpy.ndarray elementBoundaryLocalElementBoundariesArray,
                          numpy.ndarray csrColumnOffsets_eb_u_u):
        cdef numpy.ndarray rowptr, colind, globalJacobian_a
        (rowptr, colind, globalJacobian_a) = globalJacobian.getCSRrepresentation()
        self.thisptr.calculateJacobian(< double*> mesh_trial_ref.data,
                                        < double * > mesh_grad_trial_ref.data,
                                        < double * > mesh_dof.data,
                                        < int * > mesh_l2g.data,
                                        < double * > dV_ref.data,
                                        < double * > u_trial_ref.data,
                                        < double * > u_grad_trial_ref.data,
                                        < double * > u_test_ref.data,
                                        < double * > u_grad_test_ref.data,
                                        < double * > momentum_trial_ref.data,
                                        < double * > momentum_grad_trial_ref.data,
                                        < double * > mesh_trial_trace_ref.data,
                                        < double * > mesh_grad_trial_trace_ref.data,
                                        < double * > dS_ref.data,
                                        < double * > u_trial_trace_ref.data,
                                        < double * > u_grad_trial_trace_ref.data,
                                        < double * > u_test_trace_ref.data,
                                        < double * > u_grad_test_trace_ref.data,
                                        < double * > normal_ref.data,
                                        < double * > boundaryJac_ref.data,
                                        nElements_global,
                                        < int * > isDOFBoundary.data,
                                        < int * > isFluxBoundary.data,
                                        < int * > u_l2g.data,
                                        < double * > u_dof.data,
                                        < int * > velocity_l2g.data,
                                        nDofs_velocity_per_ele,
                                        < double * > velocity_x_dof.data,
                                        < double * > velocity_y_dof.data,
                                        < int * > csrRowIndeces_u_u.data,
                                        < int * > csrColumnOffsets_u_u.data,
                                        < double * > globalJacobian_a.data,
                                        nExteriorElementBoundaries_global,
                                        < int * > exteriorElementBoundariesArray.data,
                                        < int * > elementBoundaryElementsArray.data,
                                        < int * > elementBoundaryLocalElementBoundariesArray.data,
                                        < int * > csrColumnOffsets_eb_u_u.data)
