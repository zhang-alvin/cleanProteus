# $Id: Makefile 946 2010-01-29 17:17:41Z vparr $
SHELL:=/bin/bash
#
#  Makefile to Build three targets:
#  (1) stwave     (single-cpu stwave)
#  (2) stwave_ep  (embarassingly-parallel stwave)
#  (3) stwave_p   (parallel stwave)
#  (4) libstw.a   (parallel library build of stwave)
#  
# Last Updated:  Matt Malej Jan 31, 2013

include cmplrflags.mk

############################# Source & Object Files ######################
EXTRA_SRC  :=  degree.F rindex.F getunit.F
C_SRC      :=  findaddr.c timer.c

DRIVER_SRC :=  driver.F 

COMMON_SRC :=  os.F stw_global.F stwave_version.F here.F openfile.F finish.F fnames.F       \
               stw_parallel.F stw_globalio.F wkfnc.F splint.F Spline.F                      \
	       logfile.F rstress.F incdate.F

SRC        :=  hp_wave.F friction.F nest_interp.F rf.F rotate.F stdflx.F stdprp.F sxycalc.F \
               wkcgen.F hp_allocate.F store_Tp.F store_wave2.F store_wave3.F hp_init.F      \
               hp_next_input.F hp_step.F hp_write_output.F hp_update3d.F  halfplane.F       \
               fp_wave.F compute_bdys.F specparams.F celerity.F cospwr.F cossprd.F          \
               depgrad.F depth.F etma.F fp_friction.F gen.F one_d_prop.F                    \
               phifun.F prop.F qsimp.F specgen.F sweeps.F                                   \
               fp_sxycalc.F trapzd.F break.F fp_nest_interp.F  fp_rotate.F                  \
               fp_allocate.F fp_init.F fp_next_input.F fp_step.F fp_write_output.F          \
               check_norm.F debug.F fullplane.F stwave.F        

STWAVE     := stwave
STWAVE_P   := stwave_p
STWAVE_EP  := stwave_ep
LIBSTW     := libstw.a

######################## Target Specific Rules ###################################

ifneq ($(TARG),)
  override TARG		:= $(TARG)/
  override TARG    	:= $(subst //,/,$(TARG))
  override STWAVE    	:= $(TARG)stwave
  override STWAVE_P     := $(TARG)stwave_p
  override STWAVE_EP    := $(TARG)stwave_ep
  override LIBSTW	:= $(TARG)libstw.a
endif

EXEC    := $(STWAVE) $(STWAVE_P) $(STWAVE_EP) $(LIBSTW)

# stwave
ifeq ($(BUILDTYPE),$(STWAVE))
  override FC := $(FC)
  override O_DIR := odir/
  FFLAGS = $(FFLAGS1) $(IMODS) $(O_DIR)
  VPATH :=  ../src/hp:../src/fp:../src
endif

# stwave_p
ifeq ($(BUILDTYPE),$(STWAVE_P))
  override FC := $(PFC)
  override O_DIR := odirp/
  FFLAGS = $(FFLAGS2) $(IMODS) $(O_DIR) $(MSGLIBS)
  VPATH :=  ../src/hp:../src/fp:../src
endif

# stwave_ep
ifeq ($(BUILDTYPE),$(STWAVE_EP))
  override FC := $(PFC)
  override O_DIR := odirep/
  FFLAGS = $(FFLAGS3) $(IMODS) $(O_DIR)  $(MSGLIBS)
  VPATH :=  ../src/hp:../src/fp:../src
endif

# libstw.a
ifeq ($(BUILDTYPE),$(LIBSTW))
  override FC := $(PFC)
  override O_DIR := odirp/
  FFLAGS = $(FFLAGS2) $(IMODS) $(O_DIR) 
  VPATH :=  ../src/hp:../src/fp:../src
endif


ifneq ($(TARG),)
      override O_DIR := $(O_DIR)$(TARG)
endif

$(O_DIR) $(TARG):
	mkdir -p $@


######################## compilation rules ###############################

$(O_DIR)%.o $(O_DIR)%.mod : %.F
	$(COMPILE.F) -o $(O_DIR)$(*F).o  $<
	@if [ "`echo *.mod`" != '*.mod' ]; then mv *.mod $(O_DIR); fi

$(O_DIR)%.o : %.F
	$(COMPILE.F) -o $(O_DIR)$(*F).o  $<
	@if [ "`echo *.mod`" != '*.mod' ]; then mv *.mod $(O_DIR); fi

$(O_DIR)%.o : %.c
	$(COMPILE.c) -o $(O_DIR)$(*F).o $<

########################## Executable Targets ############################
EXTRA_OBJS := $(patsubst %.F, $(O_DIR)%.o, $(EXTRA_SRC) )


DRIVER_OBJ  := $(patsubst %.F, $(O_DIR)%.o, $(DRIVER_SRC) )

COM_OBJ :=  \
            $(patsubst %.F, $(O_DIR)%.o, $(COMMON_SRC) ) \
            $(patsubst %.c, $(O_DIR)%.o, $(C_SRC) ) \
            $(EXTRA_OBJS)

OBJ := $(patsubst %.F, $(O_DIR)%.o, $(SRC) )

# TAGLIST changed by Matt M.
TAGLIST := $(C_SRC) $(COMMON_SRC) $(STWAVE_VERSION)/Makefile \
	   $(STWAVE_VERSOIN)/cmplrflags.mk \
	   $(foreach f, $(SRC) driver.F, driver_svc.F, hp/$(f) fp/$(f))        


########################## Executable Targets ############################

.PHONY: all tags $(EXEC)



all:  $(EXEC)

delete_build_files:
	$(RM) $(O_DIR)build.F $(O_DIR)build.o $(O_DIR)build.mod


echo:
	@echo TARG: $(TARG)
	@echo stwave: $(STWAVE)
	@echo O_DIR: $(O_DIR)
	@echo exec: $(EXEC)	
	@echo compiler: $(compiler)	

	# Removed MAKELEVL==0 if-statement -- Matt M.
	$(MAKE) BUILDTYPE=$(STWAVE)   $@

	ifneq ($(TARG),)
  		stwave:		$(STWAVE)
  		stwave_p:	$(STWAVE_P)
  		stwave_ep:	$(STWAVE_EP)
		stwave_lib:	$(LIBSTW)
	endif


tags:
	cd src; etags $(TAGLIST)

$(O_DIR)build.F:
	@echo "! -*- f90 -*-"                                              >  $@; \
        echo "module build"                                                >> $@; \
        echo '   character(80), parameter :: OPT_LEVEL   = "'$(OPTNAME)'"' >> $@; \
        echo '   character(80), parameter :: BUILD_DATE  = "'$(VDATE)'"'   >> $@; \
        echo 'end module build'                                            >> $@;

$(O_DIR)build.o $(O_DIR)build.mod: $(O_DIR)build.F
	$(COMPILE.F) -o $(O_DIR)$(*F).o  $<
	@if [ "`echo *.mod`" != '*.mod' ]; then mv *.mod $(O_DIR); fi

$(STWAVE): $(O_DIR) $(TARG) $(O_DIR)build.o $(COM_OBJ) $(OBJ) $(DRIVER_OBJ)

	$(LINK.F) -o $@  $(O_DIR)build.o $(COM_OBJ) $(OBJ) $(DRIVER_OBJ) $(PERFLIBS)
	$(RM) $(O_DIR)build.o $(O_DIR)build.F  $(O_DIR)build.mod

$(STWAVE_P): $(O_DIR) $(TARG) $(O_DIR)build.o $(COM_OBJ) $(OBJ) $(DRIVER_OBJ)

	$(LINK.F) -o $@ $(O_DIR)build.o $(COM_OBJ) $(OBJ) $(DRIVER_OBJ) $(PERFLIBS)
	$(RM) $(O_DIR)build.o  $(O_DIR)build.F  $(O_DIR)build.mod

$(STWAVE_EP): $(O_DIR) $(TARG)  $(O_DIR)build.o $(COM_OBJ) $(OBJ) $(DRIVER_OBJ)

	$(LINK.F) -o $@ $(O_DIR)build.o $(COM_OBJ) $(OBJ) $(DRIVER_OBJ) $(PERFLIBS)
	$(RM) $(O_DIR)build.o  $(O_DIR)build.F  $(O_DIR)build.mod

$(LIBSTW): $(O_DIR)  $(TARG) $(O_DIR)build.o $(COM_OBJ) $(OBJ) 

	ar $(ARFLAGS) $@ $(O_DIR)build.o $(COM_OBJ) $(OBJ) 
	ar -ts $@
	$(RM) $(O_DIR)build.o  $(O_DIR)build.F  $(O_DIR)build.mod


########################## Misc Commands ####################################

clean:
	$(RM) -rf *.o *.mod odir odir* build.F $(TARG)
clobber: clean
	$(RM)  $(EXEC)
help:
	@echo "This makefile supports the following:"
	@echo "make all      	- makes all targets"
	@echo "make stwave	- makes the single-cpu executable"
	@echo "make stwave_ep   - makes the embarrasingly-parallel executable"
	@echo "make stwave_p    - makes the parallel executable"
	@echo "make libstw.a	- makes the parallel library"

svntag:
ifneq ($(TAG),)
	      echo "! -*- f90 -*-"                                             >  ../src/stwave_version.F; \
	      echo "module stwave_version"                                            >> ../src/stwave_version.F; \
	      echo '   character(80), parameter :: STW_VERSION = "'$(TAG)'"'   >> ../src/stwave_version.F; \
	      echo '   character(80), parameter :: STW_DATE    = "'$(VDATE)'"' >> ../src/stwave_version.F; \
	      echo 'end module stwave_version'                                 >> ../src/stwave_version.F; \
              SVN_ROOT=`svn info | grep "Repository Root" | sed -e 's/Repository Root: //'`;        \
              SVN=`svn info | grep "URL: " | sed -e 's/URL: //' | sed -e 's|/work||'`;              \
	      svn ci -m'moving to TAG_VERSION $(TAG)' ../src/stwave_version.F;                             \
	      svn cp -m'moving to TAG_VERSION $(TAG)' $$SVN $$SVN_ROOT/tags/$(TAG)
              else
		@echo "To svn tag do: make svntag TAG=?"
              endif


########################## Defining the DAG  ####################################

# files in src
$(O_DIR)os.o $(O_DIR)os.mod: os.F
$(O_DIR)stw_global.o $(O_DIR)stw_global.mod: stw_global.F
$(O_DIR)stwave_version.o $(O_DIR)stwave_version.mod: stwave_version.F
$(O_DIR)here.o: $(O_DIR)stw_global.mod here.F
$(O_DIR)finish.o $(O_DIR)finish.mod: $(O_DIR)stw_global.mod finish.F
$(O_DIR)fnames.o $(O_DIR)fnames.mod: $(O_DIR)finish.mod $(O_DIR)stw_global.mod $(O_DIR)os.mod fnames.F
$(O_DIR)openfile.o $(O_DIR)openfile.mod: $(O_DIR)stw_global.mod openfile.F
$(O_DIR)stw_parallel.o $(O_DIR)stw_parallel.mod: $(O_DIR)stw_global.mod stw_parallel.F
$(O_DIR)stw_globalio.o $(O_DIR)stw_globalio.mod: $(O_DIR)finish.mod $(O_DIR)stw_parallel.mod $(O_DIR)stw_global.mod stw_globalio.F
$(O_DIR)wkfnc.o: $(O_DIR)stw_global.mod wkfnc.F
$(O_DIR)splint.o: $(O_DIR)finish.mod $(O_DIR)stw_global.mod splint.F
$(O_DIR)Spline.o: $(O_DIR)stw_global.mod Spline.F
$(O_DIR)logfile.o: $(O_DIR)build.mod $(O_DIR)stwave_version.mod $(O_DIR)stw_global.mod logfile.F
$(O_DIR)rstress.o: $(O_DIR)stw_parallel.mod $(O_DIR)stw_global.mod rstress.F
$(O_DIR)incdate.o: incdate.F
$(O_DIR)degree.o: degree.F
$(O_DIR)rindex.o: rindex.F
$(O_DIR)findaddr.o: findaddr.c
$(O_DIR)timer.o: timer.c
$(O_DIR)stwave.o:   $(O_DIR)stw_global.mod $(O_DIR)stw_parallel.mod $(O_DIR)finish.mod $(O_DIR)hp_wave.mod $(O_DIR)fp_wave.mod $(O_DIR)fnames.mod $(O_DIR)halfplane.mod $(O_DIR)fullplane.mod stwave.F
$(O_DIR)driver.o :  $(O_DIR)stwave.mod $(O_DIR)stwave.o driver.F
$(O_DIR)driver_svc.o :  $(O_DIR)stwave.mod $(O_DIR)stwave.o driver_svc.F

# files in src/hp
$(O_DIR)hp_wave.o $(O_DIR)hp_wave.mod: $(O_DIR)stw_global.mod hp_wave.F
$(O_DIR)friction.o: $(O_DIR)hp_wave.mod friction.F
$(O_DIR)nest_interp.o: $(O_DIR)stw_global.mod $(O_DIR)hp_wave.mod $(O_DIR)stw_parallel.mod nest_interp.F
$(O_DIR)rf.o: $(O_DIR)finish.mod $(O_DIR)hp_wave.mod rf.F
$(O_DIR)rotate.o: $(O_DIR)stw_global.mod rotate.F
$(O_DIR)stdflx.o: $(O_DIR)stw_parallel.mod $(O_DIR)hp_wave.mod stdflx.F
$(O_DIR)stdprp.o: $(O_DIR)stw_parallel.mod $(O_DIR)hp_wave.mod stdprp.F
$(O_DIR)sxycalc.o: $(O_DIR)hp_wave.mod sxycalc.F
$(O_DIR)wkcgen.o: $(O_DIR)stw_global.mod wkcgen.F
$(O_DIR)hp_allocate.o: $(O_DIR)finish.mod $(O_DIR)hp_wave.mod $(O_DIR)stw_global.mod hp_allocate.F
$(O_DIR)store_Tp.o: $(O_DIR)hp_wave.mod $(O_DIR)stw_globalio.mod store_Tp.F
$(O_DIR)store_wave2.o: $(O_DIR)hp_wave.mod $(O_DIR)stw_globalio.mod store_wave2.F
$(O_DIR)store_wave3.o: $(O_DIR)hp_wave.mod $(O_DIR)stw_globalio.mod store_wave3.F
$(O_DIR)hp_init.o: $(O_DIR)stw_parallel.mod $(O_DIR)finish.mod $(O_DIR)fnames.mod $(O_DIR)openfile.mod $(O_DIR)hp_wave.mod hp_init.F
$(O_DIR)hp_next_input.o: $(O_DIR)stw_parallel.mod $(O_DIR)hp_wave.mod hp_next_input.F
$(O_DIR)hp_step.o: $(O_DIR)stw_parallel.mod $(O_DIR)openfile.mod $(O_DIR)hp_wave.mod hp_step.F
$(O_DIR)hp_write_output.o: $(O_DIR)finish.mod $(O_DIR)stw_parallel.mod $(O_DIR)hp_wave.mod $(O_DIR)stw_globalio.mod $(O_DIR)stw_global.mod hp_write_output.F
$(O_DIR)hp_update3d.o: $(O_DIR)stw_parallel.mod $(O_DIR)hp_wave.mod hp_update3d.F
$(O_DIR)halfplane.o: $(O_DIR)stw_global.mod $(O_DIR)finish.mod $(O_DIR)fnames.mod $(O_DIR)stw_parallel.mod $(O_DIR)hp_wave.mod halfplane.F

# files in src/fp
$(O_DIR)fp_wave.o $(O_DIR)fp_wave.mod: $(O_DIR)finish.mod $(O_DIR)stw_global.mod fp_wave.F
$(O_DIR)compute_bdys.o $(O_DIR)compute_bdys.mod: $(O_DIR)stw_parallel.mod $(O_DIR)fp_wave.mod compute_bdys.F fp_top.hf
$(O_DIR)specparams.o $(O_DIR)specparams.mod: $(O_DIR)stw_global.mod specparams.F
$(O_DIR)celerity.o: $(O_DIR)fp_wave.mod celerity.F
$(O_DIR)cospwr.o: $(O_DIR)stw_global.mod cospwr.F
$(O_DIR)cossprd.o: $(O_DIR)specparams.mod cossprd.F
$(O_DIR)depgrad.o: $(O_DIR)fp_wave.mod depgrad.F
$(O_DIR)depth.o: $(O_DIR)stw_global.mod depth.F
$(O_DIR)etma.o: $(O_DIR)specparams.mod etma.F
$(O_DIR)fp_friction.o: $(O_DIR)fp_wave.mod fp_friction.F fp_top.hf
$(O_DIR)gen.o: $(O_DIR)fp_wave.mod gen.F fp_top.hf
$(O_DIR)one_d_prop.o: $(O_DIR)fp_wave.mod one_d_prop.F fp_top.hf
$(O_DIR)phifun.o: $(O_DIR)specparams.mod phifun.F
$(O_DIR)prop.o: $(O_DIR)fp_wave.mod prop.F fp_top.hf
$(O_DIR)qsimp.o: $(O_DIR)finish.mod $(O_DIR)stw_global.mod qsimp.F
$(O_DIR)specgen.o: $(O_DIR)finish.mod $(O_DIR)specparams.mod specgen.F
$(O_DIR)sweeps.o: $(O_DIR)stw_global.mod $(O_DIR)finish.mod sweeps.F
$(O_DIR)fp_sxycalc.o: $(O_DIR)fp_wave.mod fp_sxycalc.F
$(O_DIR)trapzd.o: $(O_DIR)stw_global.mod trapzd.F
$(O_DIR)break.o: $(O_DIR)fp_wave.mod break.F fp_top.hf
$(O_DIR)fp_nest_interp.o: $(O_DIR)stw_global.mod $(O_DIR)finish.mod $(O_DIR)fp_wave.mod fp_nest_interp.F fp_top.hf
$(O_DIR)fp_rotate.o: $(O_DIR)stw_global.mod fp_rotate.F
$(O_DIR)fp_allocate.o: $(O_DIR)fp_wave.mod $(O_DIR)finish.mod fp_allocate.F fp_top.hf
$(O_DIR)fp_init.o: $(O_DIR)stw_parallel.mod $(O_DIR)openfile.mod $(O_DIR)finish.mod $(O_DIR)fnames.mod $(O_DIR)fp_wave.mod fp_init.F fp_top.hf
$(O_DIR)fp_next_input.o: $(O_DIR)fp_wave.mod $(O_DIR)stw_parallel.mod fp_next_input.F fp_top.hf
$(O_DIR)fp_step.o: $(O_DIR)compute_bdys.mod $(O_DIR)stw_parallel.mod $(O_DIR)openfile.mod $(O_DIR)finish.mod $(O_DIR)fp_wave.mod fp_step.F fp_top.hf
$(O_DIR)fp_write_output.o: $(O_DIR)stw_parallel.mod $(O_DIR)stw_globalio.mod $(O_DIR)fp_wave.mod fp_write_output.F fp_top.hf
$(O_DIR)check_norm.o: $(O_DIR)fp_wave.mod check_norm.F fp_top.hf
$(O_DIR)debug.o: $(O_DIR)stw_globalio.mod $(O_DIR)finish.mod $(O_DIR)stw_parallel.mod $(O_DIR)fp_wave.mod debug.F
$(O_DIR)fullplane.o: $(O_DIR)stw_global.mod $(O_DIR)finish.mod $(O_DIR)fnames.mod $(O_DIR)stw_parallel.mod $(O_DIR)fp_wave.mod fullplane.F
